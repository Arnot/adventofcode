(setf day6-input [0 5 10 0 11 14 13 4 11 8 8 7 1 4 12 11])
(setf test-input [0 2 7 0])

(defun max-vector-index (v)
  (let ((max 0)
        (max-index 0))
    (dotimes (i (length v))
      (when (> (aref v i) max)
        (setf max (aref v i)
              max-index i)))
      max-index))

(defun day6-part1 (input)
  (let ((visited-setups (make-hash-table :test 'equal))
        (vec (copy-sequence input))
        (cycles 0)
        (len (length input)))
    (while (not (gethash vec visited-setups))
      (let* ((start-idx (max-vector-index vec))
             (value (aref vec start-idx)))
        (setf (gethash (copy-sequence vec) visited-setups) t)
        (setf (aref vec start-idx) 0)
        (incf cycles)
        (dotimes (i value)
          (incf (aref vec (mod (+ start-idx i 1) len))))))
    cycles))


(defun day6-part2 (input)
  (let ((visited-setups (make-hash-table :test 'equal))
        (vec (copy-sequence input))
        (cycles 0)
        (len (length input)))
    (while (not (gethash vec visited-setups))
      (let* ((start-idx (max-vector-index vec))
             (value (aref vec start-idx)))
        (setf (gethash (copy-sequence vec) visited-setups) cycles)
        (setf (aref vec start-idx) 0)
        (incf cycles)
        (dotimes (i value)
          (incf (aref vec (mod (+ start-idx i 1) len))))))
    (- cycles (gethash vec visited-setups))))
